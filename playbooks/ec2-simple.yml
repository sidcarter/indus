# Use the ec2 module to create a new host and then add
# it to a special "ec2hosts" group.

- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    instance_type: "t2.micro"
    image: "ami-5ae66932"
    region: "us-east-1"
  vars_prompt:
    - name: "instance_name"
      prompt: "What do you want to name your instance? "
      default: "ec2debian"
      private: no

    - name: "keypair"
      prompt: "What's the keypair name? "
      default: "mykeypair"
      private: no

    - name: "group"
      prompt: "Do you have a security group you want to use? "
      default: "mysecgroup"
      private: no

  tasks:
    - name: make one instance
      ec2: image={{ image }}
           instance_type={{ instance_type }}
           keypair={{ keypair }}
           region={{ region }}
           group={{ group }}
           instance_tags='{"Name":"{{instance_name}}"}'
           wait=true
      register: ec2_host

    - debug: var=ec2_host
    - debug: var=item
      with_items: ec2_host.instance_ids

    - add_host: hostname={{ item.public_ip }} groupname=ec2hosts
      with_items: ec2_host.instances

    - name: wait for instance to listen on port:22
      wait_for:
        state=started
        host={{ item.public_dns_name }}
        port=22
      with_items: ec2_host.instances

# Connect to the node and gather facts, including the instance-id. These facts
# are added to inventory hostvars for the duration of the playbook's execution
# Typical "provisioning" tasks would go in this playbook.

- hosts: ec2hosts
  gather_facts: True
  user: admin
  sudo: True

  tasks:

    # fetch instance data from the metadata servers in ec2
    - ec2_facts:

    # show all known facts for this host
    - debug: var=hostvars[inventory_hostname]

    # just show the instance-id
    - debug: msg="{{ hostvars[inventory_hostname]['ansible_ec2_instance_id'] }}"

    - name: set hostname to {{ instance_name }}
      hostname:
        name: "{{ instance_name }}"

 #   - command: cat "{{ hostvars[inventory_hostname] }}" "{{ instance_name }}" > /etc/hosts

    - name: upgrade all packages
      apt: upgrade=dist

    - name: install additional packages
      apt: 
        update_cache: yes
        name: "{{ item }}"
        state: latest
      with_items: 
        - git
        - postfix
        - fetchmail
        - procmail
        - socat
        - telnet
        - bsd-mailx
        - python-pip
        - openjdk-7-jdk
        - ant

    - name: remove sendmail (stupid piece of crap)
      apt: pkg=sendmail state=absent

#    - name: Create user 
#      user: 
#        name: "{{ username }}"
#        state: present
